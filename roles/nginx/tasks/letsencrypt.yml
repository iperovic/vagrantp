---
#SSL
#Issue a LetsEncrypt certificate
#2DO: Compare to openssl_certificate module with acme provider - may be simpler

# Create directories
- name: Create TLS directories
  file: path=/etc/pki/nginx/private mode=750 owner=root group=nginx state=directory
#system_u:object_r:cert_t:s0

#Increase available entropy
- import_tasks: haveged.yml

#ansible SSL operations require PyOpenSSL>=0.15
- name: Install pip
  yum: name=python2-pip state=present
#repo version too old, install with pip
- name: Install PyOpenSSL
  pip: name=pyopenssl state=present
# Generate key
- name: Generate certificate private key
  openssl_privatekey: path=/etc/pki/nginx/private/server.key type=RSA size=2048 state=present
# Generate CSR
- name: Generate OpenSSL CSR
  openssl_csr:
    path: /etc/pki/nginx/server.csr
    privatekey_path: /etc/pki/nginx/private/server.key
    country_name: "{{ csr_country_name }}"
    organization_name: "{{ csr_organization_name }}"
    email_address: "{{ csr_email_address }}"
    common_name: "{{ website_hostname }}"
    subject_alt_name: "DNS:{{ website_hostname }}"
    state: present

#2DO - add option to use existing key/account - this always generates a new one
- name: Generate account private key
  openssl_privatekey: path=/etc/pki/nginx/private/le_account.key state=present

#Add root and intermediate CA certificates
- name: Copy CA certificates
  copy: src="{{ item }}" dest=/etc/pki/nginx
  with_items:
    - "{{ ca_root_cert }}"
    - "{{ ca_intermediate_cert }}"
- name: Create ssl_trusted_certificate for nginx
  shell: cat "{{ ca_intermediate_cert }}" "{{ ca_root_cert }}" > CA_root_plus_intermediate.crt
  args:
    chdir: /etc/pki/nginx
    creates: CA_root_plus_intermediate.crt
#LetsEncrypt will use staging environment unless you update acme_directory option
#current acme_directory=https://acme-v01.api.letsencrypt.org/directory
#current agreement=https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf
#staging CA root https://letsencrypt.org/certs/fakelerootx1.pem
#staging CA intermediate https://letsencrypt.org/certs/fakeleintermediatex1.pem

#LetsEncrypt request
- name: LetsEncrypt request certificate
  letsencrypt: account_key=/etc/pki/nginx/private/le_account.key csr=/etc/pki/nginx/server.csr
    dest=/etc/pki/nginx/server.crt agreement=https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf
  register: certificate_challenge

#Print the response
#- debug: msg="{{ certificate_challenge }}"

#Open port 80 to serve the challenge data
- name: Open port 80
  firewalld: service=http state=enabled
  when: certificate_challenge|changed
  register: port_change
#create dir for challenge
- name: Create directories for challenge data
  file: path="{{ nginx_root }}/.well-known/acme-challenge" state=directory
  when: certificate_challenge|changed

#Fulfill the challenge
- name: Fulfill LetsEncrypt challenge
  copy: dest=/usr/share/nginx/html/{{ certificate_challenge['challenge_data'][website_hostname]['http-01']['resource'] }}
    content="{{ certificate_challenge['challenge_data'][website_hostname]['http-01']['resource_value'] }}"
  when: certificate_challenge|changed

#LetsEncrypt receive
- name: LetsEncrypt receive certificate
  letsencrypt: account_key=/etc/pki/nginx/private/le_account.key csr=/etc/pki/nginx/server.csr
    dest=/etc/pki/nginx/server.crt data="{{ certificate_challenge }}"
  register: certificate_receive

- name: Add intermediate cert
  shell: cat "{{ ca_intermediate_cert }}" >> server.crt
  args:
    chdir: /etc/pki/nginx
  when: certificate_receive|changed

#clean up
- name: Remove challenge data
  file: path="{{ nginx_root }}/.well-known" state=absent
- name: Close port 80
  firewalld: service=http state=disabled
  when: port_change|changed
