---
#Prepare allready issued certificates for use with HAProxy
#2DO: make it more generic so role could be reusable on its own
#create directory
- name: Create TLS directories
  file: path=/etc/pki/haproxy mode=750 owner=root group=haproxy state=directory
#Prepare certificate bundle, intermediate is allready bundled with cert.
#It seems to work fine in this order. Considering different orders alleged by
#different sources, I guess the order doesn't matter.
- name: Create certificate bundle for haproxy
  shell: cat private/server.key server.crt dhparam.pem >../haproxy/haproxy.pem
  args:
    chdir: /etc/pki/nginx
    creates: ../haproxy/haproxy.pem

- name: Set permissions/ownership of haproxy bundle
  file: path=/etc/pki/haproxy/haproxy.pem mode=600 owner=root

- name: Prepare issuer file
  shell: cat {{ ca_intermediate_cert }} > ../haproxy/haproxy.pem.issuer
  args:
    chdir: /etc/pki/nginx
    creates: ../haproxy/haproxy.pem.issuer

#not verifying OCSP signer on staging
#you should refresh this periodicaly and reload service or send info to socket
# if openssl >=1.1.0 you can leave out the -header switch or use format
#host=fqdn instead of host fqdn.
#2DO - fix with checking target openssl version
#2DO - extract url/hostname from existing certificate
- name: Collect OCSP response
  shell: >
    openssl ocsp -issuer haproxy.pem.issuer -cert haproxy.pem
    -url http://ocsp.stg-int-x1.letsencrypt.org -header "Host"
    "ocsp.stg-int-x1.letsencrypt.org" -noverify -respout haproxy.pem.ocsp
  args:
    chdir: /etc/pki/haproxy
    creates: haproxy.pem.ocsp
